{"version":3,"sources":["components/Header/index.js","components/Fields/TextField.js","components/Fields/RadioField.js","components/Form/Form.js","components/Form/index.js","components/Form/FormContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","index_es","variant","color","TextFieldHOC","_ref","input","label","_ref$meta","meta","touched","error","custom","Object","objectWithoutProperties","assign","floatingLabelText","RadioFieldHOC","rest","valueSelected","value","onChange","event","Form","props","handleSubmit","pristine","submitting","onSubmit","component","Field","name","TextField","RadioField","aria-label","control","type","disabled","reduxForm","form","validate","values","errors","age","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submit","bind","assertThisInitialized","console","log","className","components_Form","Component","Boolean","window","location","hostname","match","rootReducer","combineReducers","formReducer","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c91191d.chunk.js","sourcesContent":["import React from 'react'\nimport { Typography } from '@material-ui/core'\n\nexport default function Header() {\n  return(\n    <Typography variant=\"h2\" color=\"primary\">\n      Interpret your blood test results\n    </Typography>\n  )\n}\n","import React from 'react'\nimport { TextField } from '@material-ui/core'\n\nexport default function TextFieldHOC({\n input,\n label,\n meta: { touched, error },\n ...custom\n}) {\n  return (\n    <TextField\n      floatingLabelText={label}\n      label={label}\n      error={touched && error}\n      {...input}\n      {...custom}\n    />\n  )\n}\n","import React from 'react'\nimport { RadioGroup } from '@material-ui/core'\n\nexport default function RadioFieldHOC({ input, ...rest }) {\n  return (\n    <RadioGroup\n      {...input}\n      {...rest}\n      valueSelected={input.value}\n      onChange={(event, value) => input.onChange(value)}\n    />\n  )\n}\n","import React from 'react'\nimport { Field } from 'redux-form'\nimport { Radio, Button, FormControl, FormLabel, FormControlLabel } from '@material-ui/core'\n\nimport TextField from '../Fields/TextField'\nimport RadioField from '../Fields/RadioField'\n\nconst Form = props => {\n  const { handleSubmit, pristine, submitting } = props\n  return(\n    <form onSubmit={handleSubmit}>\n      <FormControl component=\"fieldset\">\n        <Field\n          name=\"age\"\n          component={TextField}\n          label=\"Age (years)\"\n        />\n        <div>\n          <FormLabel component=\"legend\">Gender (biological)</FormLabel>\n          <Field\n            name=\"gender\"\n            component={RadioField}\n            aria-label=\"Gender (biological)\"\n          >\n            <FormControlLabel\n              value=\"male\"\n              control={<Radio color=\"primary\" />}\n              label=\"Male\"\n            />\n            <FormControlLabel\n              value=\"female\"\n              control={<Radio color=\"primary\" />}\n              label=\"Female\"\n            />\n          </Field>\n        </div>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={pristine || submitting}>Submit</Button>\n      </FormControl>\n   </form>\n  )\n}\n\nexport default Form\n","import Form from './FormContainer'\n\nexport default Form\n","import Form from './Form'\nimport { reduxForm } from 'redux-form'\n\nconst validate = values => {\n    const errors = {}\n    if(!values.age) {\n        errors.age = 'Required'\n    }\n    return errors\n}\n\nexport default reduxForm({\n  form: 'rba',\n  validate,\n})(Form)\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './components/Header'\nimport Form from './components/Form'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.submit = this.submit.bind(this)\n  }\n\n  submit(values) {\n    console.log(values)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Form onSubmit={this.submit}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore, combineReducers } from 'redux'\nimport { reducer as formReducer } from 'redux-form'\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\n\nconst rootReducer = combineReducers({\n    form: formReducer,\n})\n\nconst store = createStore(rootReducer)\n\nconst Wrapper = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(<Wrapper />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}